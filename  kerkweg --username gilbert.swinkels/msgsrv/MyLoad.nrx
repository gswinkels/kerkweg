-- trace results
parse arg fin fout   -- get the arguments: input and output files
if fout='' then do
  say '# Please specify both input and output files'
  exit 1
end


/* Open and check the files */
do
  infile=File(fin)
  instream=FileInputStream(infile)
  inhandle=BufferedReader(InputStreamReader(instream))
  outfile=File(fout)
  if outfile.getAbsolutePath=infile.getAbsolutePath then do
    say '# Input file cannot be used as the output file'
    exit 1
  end
  outstream=FileOutputStream(outfile)
  outhandle=OutputStreamWriter(outstream)
  say 'Processing' infile'...'
catch e=IOException
  say '# error opening file' e.getMessage
end

linesep=System.getProperty('line.separator') -- be platform-neutral
mc = MessageServerClient.getInstance()
mc.setSendCommand("")
mc.setSendMessageId("")
mc.setSendPayload("")
mc.setSendProcessingRule("")
mc.setSendQueueName("")
help=""
say "\n"

/* The main processing loop */
loop linenum=1 by 1
line=Rexx inhandle.readLine           -- get next line [as Rexx string]
if line=null then leave linenum       -- normal end of file

  parse line pre '=' post     -- process the line
  help=help post
  select case pre
        when "action" then
        do
	   select case post.upper
	   when "P" then mc.setSendCommand(Message.COMMAND_PUT)                  -- put message on a queue
	   when "G" then mc.setSendCommand(Message.COMMAND_GET)                  -- get message from a queue
	   when "D" then mc.setSendCommand(Message.COMMAND_DELETE)               -- delete all messages on a specific queue
	   when "A" then mc.setSendCommand(Message.COMMAND_ADMIN)                -- list all queues with their message id's and messages
	   when "S" then mc.setSendCommand(Message.COMMAND_STOP)                 -- request server stop, to be confirmed on server console
	   otherwise say "invalid input"
	   end
        end
	when "payload" then mc.setSendPayload(post)
	when "qn" then mc.setSendQueueName(post)
	when "id" then mc.setSendMessageId(post)
	when "rule" then mc.setSendProcessingRule(post)
	when "send" then
                do
		mc.setSendStatus(Message.STATUS_OK)
		mc.setSendHost("127.0.0.1")
	        mc.setSendPortNumber(584)
		mc.send()
		line=Rexx System.currentTimeMillis() 
		help=line help "reply: "
                help=help mc.getReplyStatus() mc.getReplyQueueName() mc.getReplyMessageId() mc.getReplyPayload()
		if linenum>1 then outhandle.write(linesep, 0, linesep.length)
                outhandle.write(help, 0, help.length)
		mc.setSendCommand("")
		mc.setSendMessageId("")
		mc.setSendPayload("")
		mc.setSendProcessingRule("")
		mc.setSendQueueName("")
		help=""
                end
	otherwise say "don't understand input"
   end
catch e=IOException
say '# error reading or writing file' e.getMessage
catch RuntimeException
say '# processing ended'
finally do                              -- close files
    if inhandle\=null  then inhandle.close
    if outhandle\=null then outhandle.close
  catch IOException
    -- ignore errors during close
  end
end linenum
say linenum-1 'lines written'
